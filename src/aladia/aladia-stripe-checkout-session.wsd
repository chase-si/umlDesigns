@startuml
title "add card to checkout session in stripe"
legend right
  Tips: ...
end legend

box "Frontend"
participant CheckoutDialog
end box

box "Backend"
participant requestService
end box

box Stripe
participant StripeAPI
participant Webhooks
end box

note over CheckoutDialog
Frontend: 

@stripe/stripe-js
{ betas: ['custom_checkout_beta_5'] },
end note
note over requestService
Backend: 

require("stripe") in NodeJS
apiVersion: '2024-12-18.acacia; custom_checkout_beta=v1',
end note

autonumber
CheckoutDialog <-> StripeAPI : initStripe(public_key, {locale, betas}))
requestService <-> StripeAPI : initStripe(private_key, {apiVersion})

== init payment element ==
note over CheckoutDialog
post params: {
  courseID/cyclesID => line_items.priceID
  qutantity => line_items.quantity
  token => customerID
  ...
}
end note
CheckoutDialog -> requestService: <color blue>/payment/checkout-sessions-create
note over requestService
const session = await stripe.checkout.sessions.create({
  line_items: [{ price: priceID, quantity: quantity }],
  payment_method_types: ['card'],
  customer: customerId,
  mode: 'payment',
  ui_mode: 'custom',
  saved_payment_method_options: {
    payment_method_save: 'enabled', // ==> allow the FE to save the card
  },
  return_url: <color red> not set, important!!!! or it will cover the FE set!!!!
  ...
});

end note
requestService <-> StripeAPI: get client_secret
requestService -> CheckoutDialog: return client_secret and <color red>sessionID</color>
note over CheckoutDialog
const checkout = await stripe.initCheckout({
  clientSecret: checkoutSession.session.client_secret
});

// custome styles here â†“
const paymentElement = checkoutSession.createElement('payment', {...});
paymentElement.mount('#payment-element');
end note
CheckoutDialog <-> StripeAPI: render the payment Element

== checkout click==
autonumber 1
CheckoutDialog -> StripeAPI: submit the payment
note over CheckoutDialog
const confirmRes = await checkout.confirm({
  savePaymentMethod, // savePaymentMethod: boolean
  redirect: 'if_required', // avoid unnecessary redirect
  <color red>reutrnUrl: `${returnUrl}?is-default=${isDefault}&session_id=${sessionID}`, // redirect URL
});
if (confirmRes.error) {
  // handle error to show
}

// if redirection, no this, check the step 4.2.1
if (confirmRes.success) {
  // check the step 4.2.1
}
end note
CheckoutDialog <- StripeAPI: await res or redirect to return_url
requestService <-- Webhooks: paid successful webhook(not sure timing)
alt if redirect
autonumber 4.1.1
  note over requestService
    sessionId => id in redirect URL as queryParam
    isDefaultCard => is-default in redirect URL as queryParam

    get/post params: { isDefaultCard: boolean}
  end note
  CheckoutDialog -> requestService: <color blue>/payment/transaction/checkout-sessions/:sessionId
else else await res
autonumber 4.2.1
  note over requestService
    sessionId => id in await res
    isDefaultCard => FE already know as variable

    get/post params: { isDefaultCard: boolean}
  end note
  CheckoutDialog -> requestService: <color blue>/payment/transaction/checkout-sessions/:sessionId</color>
end

autonumber 5
requestService -> requestService: set as default paymentMethod
requestService -> requestService: sync the DB, in case checkout result earlier than the webhook
requestService -> StripeAPI: get checkoutSession
requestService <- StripeAPI: return checkoutSession
note over requestService
  const session = await stripe.checkout.sessions.retrieve(
    sessionId
  );
end note
CheckoutDialog <- requestService: render by checkoutSession status from BE
@enduml