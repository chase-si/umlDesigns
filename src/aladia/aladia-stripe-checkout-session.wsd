@startuml
title "checkout with checkout session and add card"
legend right
  Tips: ...
end legend

box "Frontend"
participant CheckoutDialog
participant paymentStore
end box

box "Backend"
participant requestService
end box

box Stripe
participant StripeAPI
participant Webhooks
end box

note over requestService
Backend: 

require("stripe") in NodeJS
apiVersion: '2024-12-18.acacia; custom_checkout_beta=v1',
end note

autonumber
requestService <-> StripeAPI : initStripe(private_key, {apiVersion})

== init payment element ==
CheckoutDialog -> CheckoutDialog: click `buy now` or `subscribe now` button
CheckoutDialog -> paymentStore: <color green>handleCheckoutSession()</color>
note over paymentStore
  post params: {
    courseId,
    quantity,
    cycleId?, // only for subscription course
    useSinglePayment?, // only for subscription course
    promoCode?,
    couponId?,
  }
end note
paymentStore -> requestService: <color blue>POST /payment/checkout-sessions
note over requestService
Backend params to Stripe API:
const session = await stripe.checkout.sessions.create({
  line_items: [{ price: priceID, quantity: quantity }],
  payment_method_types: ['card'],
  customer: customerId,
  mode: 'payment',
  ui_mode: 'custom',
  saved_payment_method_options: {
    payment_method_save: 'enabled', // ==> allow the FE to save the card
  },
  return_url: <color red> not set, important!!!! or it will cover the FE set!!!!
  ...
});

end note
requestService <-> StripeAPI: get client_secret
requestService -> paymentStore: return <color green>checkoutSession = clientSecret + sessionId</color>
paymentStore -> paymentStore: store <color green>checkoutSession</color>
note over paymentStore
Frontend: 

@stripe/stripe-js
{ betas: ['custom_checkout_beta_5'] },

const stripe = initStripe(public_key, {locale, betas}))
end note
paymentStore <-> StripeAPI: lazy import, so don't init FE stripe until we are here. 
paymentStore -> paymentStore: store <color green>stripe</color> instance

note over paymentStore
const checkout = await stripe.initCheckout({
  clientSecret: checkoutSession.clientSecret
  elementsOptions: {
    // custom styles here â†“
    appearance: {...}
  }
});
end note

paymentStore -> CheckoutDialog: send <color green>checkout</color> to page to mount the payment element
note over paymentStore
const paymentElement = checkout.createElement('payment', {...});
paymentElement.mount('#payment-element');
end note
CheckoutDialog <-> StripeAPI: render the payment Element

== checkout click==
autonumber 1
CheckoutDialog -> CheckoutDialog: fill payment info
CheckoutDialog -> CheckoutDialog: <color green>handleClickToBuy()</color>
CheckoutDialog -> StripeAPI: submit the payment
note over CheckoutDialog
const <color green>confirmRes</color> = await checkout.confirm({
  savePaymentMethod, // savePaymentMethod: boolean
  redirect: 'if_required', // avoid unnecessary redirect
  <color red>returnUrl: `${window.location.href}?setDefault=${setAsDefault.value}`, // redirect URL
});
if (confirmRes.error) {
  // handle error to show
}

// if redirection, no this, check the step 5.2.1
if (confirmRes.success) {
  // check the step 5.2.1
}
end note
CheckoutDialog <- StripeAPI: await res or redirect to return_url
requestService <-- Webhooks: paid successful webhook(not sure timing)
alt if redirect(todo: write more detail)
autonumber 5.1.1
  CheckoutDialog -> paymentStore: <color green>retrieveCheckoutSession()</color>
  note over requestService
    sessionId => id in redirect URL as queryParam
    isDefaultCard => is-default in redirect URL as queryParam

    get/post params: { isDefaultCard: boolean}
  end note
  paymentStore -> requestService: <color blue>GET/payment/checkout-sessions/:sessionId </color>
else else await res
autonumber 5.2.1
  alt if save the new card as default
    CheckoutDialog -> paymentStore: <color green>retrieveCheckoutSession(confirmRes.success.id)</color>
    paymentStore <-> requestService: <color blue>GET /payment/checkout-sessions/:sessionId </color>
    CheckoutDialog <- paymentStore: <color green>sessionInfo</color>
    CheckoutDialog -> paymentStore: <color green>setDefaultPaymentMethod(sessionInfo.paymentMethod)</color>
    paymentStore -> requestService: <color blue>PUT /payment/customers/payment-methods</color>
  end

  CheckoutDialog -> CheckoutDialog: render checkout status
  CheckoutDialog -> paymentStore: clear <color green>checkoutSession</color>
  CheckoutDialog -> CheckoutDialog: show success dialog/refresh the course details/eventBus...
end

== checkout dialog close ==
autonumber 1
CheckoutDialog -> CheckoutDialog: close the dialog
CheckoutDialog -> paymentStore: <color green>expireCheckoutSession()</color>
alt if checkoutSession
  paymentStore -> requestService: <color blue>POST /payment/checkout-sessions/:sessionId/expire</color>
  requestService -> requestService: release the seatCount related to the checkoutSession
  paymentStore <- requestService: request back
  paymentStore -> paymentStore: clear <color green>checkoutSession</color>
end
@enduml